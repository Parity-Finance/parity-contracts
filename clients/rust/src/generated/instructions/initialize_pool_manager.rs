//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

/// Accounts.
pub struct InitializePoolManager {
    /// SPL Token Mint of the underlying token to be deposited for staking
    pub base_mint: solana_program::pubkey::Pubkey,

    pub x_mint: solana_program::pubkey::Pubkey,

    pub metadata: solana_program::pubkey::Pubkey,

    pub pool_manager: solana_program::pubkey::Pubkey,

    pub vault: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub token_metadata_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,
}

impl InitializePoolManager {
    pub fn instruction(
        &self,
        args: InitializePoolManagerInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializePoolManagerInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.x_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_manager,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = InitializePoolManagerInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::PARITY_STAKING_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct InitializePoolManagerInstructionData {
    discriminator: [u8; 8],
}

impl InitializePoolManagerInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [33, 34, 202, 132, 200, 11, 214, 124],
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InitializePoolManagerInstructionArgs {
    pub name: String,
    pub symbol: String,
    pub uri: String,
    pub decimals: u8,
    pub interval_apr_rate: u64,
    pub seconds_per_interval: i32,
    pub initial_exchange_rate: u64,
    pub admin: Pubkey,
    pub deposit_cap: u64,
}

/// Instruction builder for `InitializePoolManager`.
///
/// ### Accounts:
///
///   0. `[]` base_mint
///   1. `[writable]` x_mint
///   2. `[writable]` metadata
///   3. `[writable]` pool_manager
///   4. `[writable]` vault
///   5. `[writable, signer]` owner
///   6. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   9. `[optional]` token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
///   10. `[]` associated_token_program
#[derive(Default)]
pub struct InitializePoolManagerBuilder {
    base_mint: Option<solana_program::pubkey::Pubkey>,
    x_mint: Option<solana_program::pubkey::Pubkey>,
    metadata: Option<solana_program::pubkey::Pubkey>,
    pool_manager: Option<solana_program::pubkey::Pubkey>,
    vault: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    name: Option<String>,
    symbol: Option<String>,
    uri: Option<String>,
    decimals: Option<u8>,
    interval_apr_rate: Option<u64>,
    seconds_per_interval: Option<i32>,
    initial_exchange_rate: Option<u64>,
    admin: Option<Pubkey>,
    deposit_cap: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializePoolManagerBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// SPL Token Mint of the underlying token to be deposited for staking
    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }
    #[inline(always)]
    pub fn x_mint(&mut self, x_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.x_mint = Some(x_mint);
        self
    }
    #[inline(always)]
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.metadata = Some(metadata);
        self
    }
    #[inline(always)]
    pub fn pool_manager(&mut self, pool_manager: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_manager = Some(pool_manager);
        self
    }
    #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault = Some(vault);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_metadata_program = Some(token_metadata_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.symbol = Some(symbol);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn decimals(&mut self, decimals: u8) -> &mut Self {
        self.decimals = Some(decimals);
        self
    }
    #[inline(always)]
    pub fn interval_apr_rate(&mut self, interval_apr_rate: u64) -> &mut Self {
        self.interval_apr_rate = Some(interval_apr_rate);
        self
    }
    #[inline(always)]
    pub fn seconds_per_interval(&mut self, seconds_per_interval: i32) -> &mut Self {
        self.seconds_per_interval = Some(seconds_per_interval);
        self
    }
    #[inline(always)]
    pub fn initial_exchange_rate(&mut self, initial_exchange_rate: u64) -> &mut Self {
        self.initial_exchange_rate = Some(initial_exchange_rate);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn deposit_cap(&mut self, deposit_cap: u64) -> &mut Self {
        self.deposit_cap = Some(deposit_cap);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts =
            InitializePoolManager {
                base_mint: self.base_mint.expect("base_mint is not set"),
                x_mint: self.x_mint.expect("x_mint is not set"),
                metadata: self.metadata.expect("metadata is not set"),
                pool_manager: self.pool_manager.expect("pool_manager is not set"),
                vault: self.vault.expect("vault is not set"),
                owner: self.owner.expect("owner is not set"),
                rent: self.rent.unwrap_or(solana_program::pubkey!(
                    "SysvarRent111111111111111111111111111111111"
                )),
                system_program: self
                    .system_program
                    .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                )),
                token_metadata_program: self.token_metadata_program.unwrap_or(
                    solana_program::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
                ),
                associated_token_program: self
                    .associated_token_program
                    .expect("associated_token_program is not set"),
            };
        let args = InitializePoolManagerInstructionArgs {
            name: self.name.clone().expect("name is not set"),
            symbol: self.symbol.clone().expect("symbol is not set"),
            uri: self.uri.clone().expect("uri is not set"),
            decimals: self.decimals.clone().expect("decimals is not set"),
            interval_apr_rate: self
                .interval_apr_rate
                .clone()
                .expect("interval_apr_rate is not set"),
            seconds_per_interval: self
                .seconds_per_interval
                .clone()
                .expect("seconds_per_interval is not set"),
            initial_exchange_rate: self
                .initial_exchange_rate
                .clone()
                .expect("initial_exchange_rate is not set"),
            admin: self.admin.clone().expect("admin is not set"),
            deposit_cap: self.deposit_cap.clone().expect("deposit_cap is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_pool_manager` CPI accounts.
pub struct InitializePoolManagerCpiAccounts<'a, 'b> {
    /// SPL Token Mint of the underlying token to be deposited for staking
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub x_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_manager: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_pool_manager` CPI instruction.
pub struct InitializePoolManagerCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token Mint of the underlying token to be deposited for staking
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub x_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_manager: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializePoolManagerInstructionArgs,
}

impl<'a, 'b> InitializePoolManagerCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializePoolManagerCpiAccounts<'a, 'b>,
        args: InitializePoolManagerInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            base_mint: accounts.base_mint,
            x_mint: accounts.x_mint,
            metadata: accounts.metadata,
            pool_manager: accounts.pool_manager,
            vault: accounts.vault,
            owner: accounts.owner,
            rent: accounts.rent,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            token_metadata_program: accounts.token_metadata_program,
            associated_token_program: accounts.associated_token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.x_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_manager.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = InitializePoolManagerInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PARITY_STAKING_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.x_mint.clone());
        account_infos.push(self.metadata.clone());
        account_infos.push(self.pool_manager.clone());
        account_infos.push(self.vault.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_metadata_program.clone());
        account_infos.push(self.associated_token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializePoolManager` via CPI.
///
/// ### Accounts:
///
///   0. `[]` base_mint
///   1. `[writable]` x_mint
///   2. `[writable]` metadata
///   3. `[writable]` pool_manager
///   4. `[writable]` vault
///   5. `[writable, signer]` owner
///   6. `[]` rent
///   7. `[]` system_program
///   8. `[]` token_program
///   9. `[]` token_metadata_program
///   10. `[]` associated_token_program
pub struct InitializePoolManagerCpiBuilder<'a, 'b> {
    instruction: Box<InitializePoolManagerCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializePoolManagerCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializePoolManagerCpiBuilderInstruction {
            __program: program,
            base_mint: None,
            x_mint: None,
            metadata: None,
            pool_manager: None,
            vault: None,
            owner: None,
            rent: None,
            system_program: None,
            token_program: None,
            token_metadata_program: None,
            associated_token_program: None,
            name: None,
            symbol: None,
            uri: None,
            decimals: None,
            interval_apr_rate: None,
            seconds_per_interval: None,
            initial_exchange_rate: None,
            admin: None,
            deposit_cap: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// SPL Token Mint of the underlying token to be deposited for staking
    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }
    #[inline(always)]
    pub fn x_mint(
        &mut self,
        x_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.x_mint = Some(x_mint);
        self
    }
    #[inline(always)]
    pub fn metadata(
        &mut self,
        metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata = Some(metadata);
        self
    }
    #[inline(always)]
    pub fn pool_manager(
        &mut self,
        pool_manager: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_manager = Some(pool_manager);
        self
    }
    #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vault = Some(vault);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_metadata_program = Some(token_metadata_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.instruction.symbol = Some(symbol);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn decimals(&mut self, decimals: u8) -> &mut Self {
        self.instruction.decimals = Some(decimals);
        self
    }
    #[inline(always)]
    pub fn interval_apr_rate(&mut self, interval_apr_rate: u64) -> &mut Self {
        self.instruction.interval_apr_rate = Some(interval_apr_rate);
        self
    }
    #[inline(always)]
    pub fn seconds_per_interval(&mut self, seconds_per_interval: i32) -> &mut Self {
        self.instruction.seconds_per_interval = Some(seconds_per_interval);
        self
    }
    #[inline(always)]
    pub fn initial_exchange_rate(&mut self, initial_exchange_rate: u64) -> &mut Self {
        self.instruction.initial_exchange_rate = Some(initial_exchange_rate);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: Pubkey) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn deposit_cap(&mut self, deposit_cap: u64) -> &mut Self {
        self.instruction.deposit_cap = Some(deposit_cap);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializePoolManagerInstructionArgs {
            name: self.instruction.name.clone().expect("name is not set"),
            symbol: self.instruction.symbol.clone().expect("symbol is not set"),
            uri: self.instruction.uri.clone().expect("uri is not set"),
            decimals: self
                .instruction
                .decimals
                .clone()
                .expect("decimals is not set"),
            interval_apr_rate: self
                .instruction
                .interval_apr_rate
                .clone()
                .expect("interval_apr_rate is not set"),
            seconds_per_interval: self
                .instruction
                .seconds_per_interval
                .clone()
                .expect("seconds_per_interval is not set"),
            initial_exchange_rate: self
                .instruction
                .initial_exchange_rate
                .clone()
                .expect("initial_exchange_rate is not set"),
            admin: self.instruction.admin.clone().expect("admin is not set"),
            deposit_cap: self
                .instruction
                .deposit_cap
                .clone()
                .expect("deposit_cap is not set"),
        };
        let instruction = InitializePoolManagerCpi {
            __program: self.instruction.__program,

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            x_mint: self.instruction.x_mint.expect("x_mint is not set"),

            metadata: self.instruction.metadata.expect("metadata is not set"),

            pool_manager: self
                .instruction
                .pool_manager
                .expect("pool_manager is not set"),

            vault: self.instruction.vault.expect("vault is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_metadata_program: self
                .instruction
                .token_metadata_program
                .expect("token_metadata_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct InitializePoolManagerCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    x_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_manager: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    name: Option<String>,
    symbol: Option<String>,
    uri: Option<String>,
    decimals: Option<u8>,
    interval_apr_rate: Option<u64>,
    seconds_per_interval: Option<i32>,
    initial_exchange_rate: Option<u64>,
    admin: Option<Pubkey>,
    deposit_cap: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
