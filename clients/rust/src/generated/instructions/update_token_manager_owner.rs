//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

/// Accounts.
pub struct UpdateTokenManagerOwner {
    pub token_manager: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,
}

impl UpdateTokenManagerOwner {
    pub fn instruction(
        &self,
        args: UpdateTokenManagerOwnerInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateTokenManagerOwnerInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_manager,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = UpdateTokenManagerOwnerInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::PARITY_ISSUANCE_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct UpdateTokenManagerOwnerInstructionData {
    discriminator: [u8; 8],
}

impl UpdateTokenManagerOwnerInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [31, 16, 91, 211, 211, 16, 93, 144],
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct UpdateTokenManagerOwnerInstructionArgs {
    pub new_admin: Option<Pubkey>,
    pub new_minter: Option<Pubkey>,
    pub emergency_fund_basis_points: Option<u16>,
    pub new_withdraw_time_lock: Option<i64>,
    pub new_withdraw_execution_window: Option<i64>,
    pub new_mint_fee_bps: Option<u16>,
    pub new_redeem_fee_bps: Option<u16>,
}

/// Instruction builder for `UpdateTokenManagerOwner`.
///
/// ### Accounts:
///
///   0. `[writable]` token_manager
///   1. `[signer]` owner
#[derive(Default)]
pub struct UpdateTokenManagerOwnerBuilder {
    token_manager: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    new_admin: Option<Pubkey>,
    new_minter: Option<Pubkey>,
    emergency_fund_basis_points: Option<u16>,
    new_withdraw_time_lock: Option<i64>,
    new_withdraw_execution_window: Option<i64>,
    new_mint_fee_bps: Option<u16>,
    new_redeem_fee_bps: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateTokenManagerOwnerBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn token_manager(&mut self, token_manager: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_manager = Some(token_manager);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_admin(&mut self, new_admin: Pubkey) -> &mut Self {
        self.new_admin = Some(new_admin);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_minter(&mut self, new_minter: Pubkey) -> &mut Self {
        self.new_minter = Some(new_minter);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn emergency_fund_basis_points(&mut self, emergency_fund_basis_points: u16) -> &mut Self {
        self.emergency_fund_basis_points = Some(emergency_fund_basis_points);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_withdraw_time_lock(&mut self, new_withdraw_time_lock: i64) -> &mut Self {
        self.new_withdraw_time_lock = Some(new_withdraw_time_lock);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_withdraw_execution_window(
        &mut self,
        new_withdraw_execution_window: i64,
    ) -> &mut Self {
        self.new_withdraw_execution_window = Some(new_withdraw_execution_window);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_mint_fee_bps(&mut self, new_mint_fee_bps: u16) -> &mut Self {
        self.new_mint_fee_bps = Some(new_mint_fee_bps);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_redeem_fee_bps(&mut self, new_redeem_fee_bps: u16) -> &mut Self {
        self.new_redeem_fee_bps = Some(new_redeem_fee_bps);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateTokenManagerOwner {
            token_manager: self.token_manager.expect("token_manager is not set"),
            owner: self.owner.expect("owner is not set"),
        };
        let args = UpdateTokenManagerOwnerInstructionArgs {
            new_admin: self.new_admin.clone(),
            new_minter: self.new_minter.clone(),
            emergency_fund_basis_points: self.emergency_fund_basis_points.clone(),
            new_withdraw_time_lock: self.new_withdraw_time_lock.clone(),
            new_withdraw_execution_window: self.new_withdraw_execution_window.clone(),
            new_mint_fee_bps: self.new_mint_fee_bps.clone(),
            new_redeem_fee_bps: self.new_redeem_fee_bps.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_token_manager_owner` CPI accounts.
pub struct UpdateTokenManagerOwnerCpiAccounts<'a, 'b> {
    pub token_manager: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_token_manager_owner` CPI instruction.
pub struct UpdateTokenManagerOwnerCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_manager: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateTokenManagerOwnerInstructionArgs,
}

impl<'a, 'b> UpdateTokenManagerOwnerCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateTokenManagerOwnerCpiAccounts<'a, 'b>,
        args: UpdateTokenManagerOwnerInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            token_manager: accounts.token_manager,
            owner: accounts.owner,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_manager.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = UpdateTokenManagerOwnerInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PARITY_ISSUANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(2 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.token_manager.clone());
        account_infos.push(self.owner.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateTokenManagerOwner` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` token_manager
///   1. `[signer]` owner
pub struct UpdateTokenManagerOwnerCpiBuilder<'a, 'b> {
    instruction: Box<UpdateTokenManagerOwnerCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateTokenManagerOwnerCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateTokenManagerOwnerCpiBuilderInstruction {
            __program: program,
            token_manager: None,
            owner: None,
            new_admin: None,
            new_minter: None,
            emergency_fund_basis_points: None,
            new_withdraw_time_lock: None,
            new_withdraw_execution_window: None,
            new_mint_fee_bps: None,
            new_redeem_fee_bps: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn token_manager(
        &mut self,
        token_manager: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_manager = Some(token_manager);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_admin(&mut self, new_admin: Pubkey) -> &mut Self {
        self.instruction.new_admin = Some(new_admin);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_minter(&mut self, new_minter: Pubkey) -> &mut Self {
        self.instruction.new_minter = Some(new_minter);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn emergency_fund_basis_points(&mut self, emergency_fund_basis_points: u16) -> &mut Self {
        self.instruction.emergency_fund_basis_points = Some(emergency_fund_basis_points);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_withdraw_time_lock(&mut self, new_withdraw_time_lock: i64) -> &mut Self {
        self.instruction.new_withdraw_time_lock = Some(new_withdraw_time_lock);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_withdraw_execution_window(
        &mut self,
        new_withdraw_execution_window: i64,
    ) -> &mut Self {
        self.instruction.new_withdraw_execution_window = Some(new_withdraw_execution_window);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_mint_fee_bps(&mut self, new_mint_fee_bps: u16) -> &mut Self {
        self.instruction.new_mint_fee_bps = Some(new_mint_fee_bps);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn new_redeem_fee_bps(&mut self, new_redeem_fee_bps: u16) -> &mut Self {
        self.instruction.new_redeem_fee_bps = Some(new_redeem_fee_bps);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateTokenManagerOwnerInstructionArgs {
            new_admin: self.instruction.new_admin.clone(),
            new_minter: self.instruction.new_minter.clone(),
            emergency_fund_basis_points: self.instruction.emergency_fund_basis_points.clone(),
            new_withdraw_time_lock: self.instruction.new_withdraw_time_lock.clone(),
            new_withdraw_execution_window: self.instruction.new_withdraw_execution_window.clone(),
            new_mint_fee_bps: self.instruction.new_mint_fee_bps.clone(),
            new_redeem_fee_bps: self.instruction.new_redeem_fee_bps.clone(),
        };
        let instruction = UpdateTokenManagerOwnerCpi {
            __program: self.instruction.__program,

            token_manager: self
                .instruction
                .token_manager
                .expect("token_manager is not set"),

            owner: self.instruction.owner.expect("owner is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct UpdateTokenManagerOwnerCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    token_manager: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_admin: Option<Pubkey>,
    new_minter: Option<Pubkey>,
    emergency_fund_basis_points: Option<u16>,
    new_withdraw_time_lock: Option<i64>,
    new_withdraw_execution_window: Option<i64>,
    new_mint_fee_bps: Option<u16>,
    new_redeem_fee_bps: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
