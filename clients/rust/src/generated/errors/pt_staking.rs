//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum PtStakingError {
    /// 6000 (0x1770) - Calculation overflow
    #[error("Calculation overflow")]
    CalculationOverflow,
    /// 6001 (0x1771) - Invalid admin
    #[error("Invalid admin")]
    InvalidAdmin,
    /// 6002 (0x1772) - Invalid owner
    #[error("Invalid owner")]
    InvalidOwner,
    /// 6003 (0x1773) - Invalid yield rate
    #[error("Invalid yield rate")]
    InvalidYieldRate,
    /// 6004 (0x1774) - Deposit cap exceeded
    #[error("Deposit cap exceeded")]
    DepositCapExceeded,
    /// 6005 (0x1775) - No exchange rate avaliable
    #[error("No exchange rate avaliable")]
    NoExchangeRateAvailable,
    /// 6006 (0x1776) - Insufficient staked amount
    #[error("Insufficient staked amount")]
    InsufficientStakedAmount,
}

impl solana_program::program_error::PrintProgramError for PtStakingError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
