/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitializeWithdrawFundsInstructionAccounts = {
  tokenManager: PublicKey | Pda;
  admin: Signer;
};

// Data.
export type InitializeWithdrawFundsInstructionData = {
  discriminator: Array<number>;
  quantity: bigint;
};

export type InitializeWithdrawFundsInstructionDataArgs = {
  quantity: number | bigint;
};

export function getInitializeWithdrawFundsInstructionDataSerializer(): Serializer<
  InitializeWithdrawFundsInstructionDataArgs,
  InitializeWithdrawFundsInstructionData
> {
  return mapSerializer<
    InitializeWithdrawFundsInstructionDataArgs,
    any,
    InitializeWithdrawFundsInstructionData
  >(
    struct<InitializeWithdrawFundsInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['quantity', u64()],
      ],
      { description: 'InitializeWithdrawFundsInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [21, 242, 187, 197, 254, 233, 162, 72],
    })
  ) as Serializer<
    InitializeWithdrawFundsInstructionDataArgs,
    InitializeWithdrawFundsInstructionData
  >;
}

// Args.
export type InitializeWithdrawFundsInstructionArgs =
  InitializeWithdrawFundsInstructionDataArgs;

// Instruction.
export function initializeWithdrawFunds(
  context: Pick<Context, 'programs'>,
  input: InitializeWithdrawFundsInstructionAccounts &
    InitializeWithdrawFundsInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'soldIssuance',
    'Ev4vixMJX6Czywj7TSjnmBapdoYmZkpVwU3cpT2akgYG'
  );

  // Accounts.
  const resolvedAccounts = {
    tokenManager: {
      index: 0,
      isWritable: true as boolean,
      value: input.tokenManager ?? null,
    },
    admin: {
      index: 1,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitializeWithdrawFundsInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeWithdrawFundsInstructionDataSerializer().serialize(
    resolvedArgs as InitializeWithdrawFundsInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
