/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Data.
export type InitializeStakePoolInstructionData = {
  discriminator: Array<number>;
};

export type InitializeStakePoolInstructionDataArgs = {};

export function getInitializeStakePoolInstructionDataSerializer(): Serializer<
  InitializeStakePoolInstructionDataArgs,
  InitializeStakePoolInstructionData
> {
  return mapSerializer<
    InitializeStakePoolInstructionDataArgs,
    any,
    InitializeStakePoolInstructionData
  >(
    struct<InitializeStakePoolInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'InitializeStakePoolInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [48, 189, 243, 73, 19, 67, 36, 83] })
  ) as Serializer<
    InitializeStakePoolInstructionDataArgs,
    InitializeStakePoolInstructionData
  >;
}

// Instruction.
export function initializeStakePool(
  context: Pick<Context, 'programs'>
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'soldStaking',
    'F9pkhuLyu1usfS5p6RCuXxeS2TQsAVqANo1M2iC8ze1t'
  );

  // Accounts.
  const resolvedAccounts = {} satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts as ResolvedAccountsWithIndices
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeStakePoolInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
