/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateAnnualYieldInstructionAccounts = {
  poolManager: PublicKey | Pda;
  tokenManager: PublicKey | Pda;
  baseMint: PublicKey | Pda;
  vault: PublicKey | Pda;
  admin: Signer;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram: PublicKey | Pda;
  soldIssuanceProgram: PublicKey | Pda;
};

// Data.
export type UpdateAnnualYieldInstructionData = {
  discriminator: Array<number>;
  annualYieldRate: bigint;
};

export type UpdateAnnualYieldInstructionDataArgs = {
  annualYieldRate: number | bigint;
};

export function getUpdateAnnualYieldInstructionDataSerializer(): Serializer<
  UpdateAnnualYieldInstructionDataArgs,
  UpdateAnnualYieldInstructionData
> {
  return mapSerializer<
    UpdateAnnualYieldInstructionDataArgs,
    any,
    UpdateAnnualYieldInstructionData
  >(
    struct<UpdateAnnualYieldInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['annualYieldRate', u64()],
      ],
      { description: 'UpdateAnnualYieldInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [254, 236, 1, 145, 180, 112, 181, 59],
    })
  ) as Serializer<
    UpdateAnnualYieldInstructionDataArgs,
    UpdateAnnualYieldInstructionData
  >;
}

// Args.
export type UpdateAnnualYieldInstructionArgs =
  UpdateAnnualYieldInstructionDataArgs;

// Instruction.
export function updateAnnualYield(
  context: Pick<Context, 'programs'>,
  input: UpdateAnnualYieldInstructionAccounts & UpdateAnnualYieldInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'soldStaking',
    '8mtouzv4S2HHmjNsPtctuKcseioXmTgAdigdaX7AqfLt'
  );

  // Accounts.
  const resolvedAccounts = {
    poolManager: {
      index: 0,
      isWritable: true as boolean,
      value: input.poolManager ?? null,
    },
    tokenManager: {
      index: 1,
      isWritable: true as boolean,
      value: input.tokenManager ?? null,
    },
    baseMint: {
      index: 2,
      isWritable: true as boolean,
      value: input.baseMint ?? null,
    },
    vault: {
      index: 3,
      isWritable: true as boolean,
      value: input.vault ?? null,
    },
    admin: {
      index: 4,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    soldIssuanceProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.soldIssuanceProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateAnnualYieldInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateAnnualYieldInstructionDataSerializer().serialize(
    resolvedArgs as UpdateAnnualYieldInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
