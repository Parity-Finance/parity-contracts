/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** CalculationOverflow: Calculation overflow */
export class PsCalculationOverflowError extends ProgramError {
  override readonly name: string = 'CalculationOverflow';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Calculation overflow', program, cause);
  }
}
codeToErrorMap.set(0x1770, PsCalculationOverflowError);
nameToErrorMap.set('CalculationOverflow', PsCalculationOverflowError);

/** InvalidAdmin: Invalid admin */
export class PsInvalidAdminError extends ProgramError {
  override readonly name: string = 'InvalidAdmin';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Invalid admin', program, cause);
  }
}
codeToErrorMap.set(0x1771, PsInvalidAdminError);
nameToErrorMap.set('InvalidAdmin', PsInvalidAdminError);

/** InvalidOwner: Invalid owner */
export class PsInvalidOwnerError extends ProgramError {
  override readonly name: string = 'InvalidOwner';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Invalid owner', program, cause);
  }
}
codeToErrorMap.set(0x1772, PsInvalidOwnerError);
nameToErrorMap.set('InvalidOwner', PsInvalidOwnerError);

/** InvalidYieldRate: Invalid yield rate */
export class PsInvalidYieldRateError extends ProgramError {
  override readonly name: string = 'InvalidYieldRate';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Invalid yield rate', program, cause);
  }
}
codeToErrorMap.set(0x1773, PsInvalidYieldRateError);
nameToErrorMap.set('InvalidYieldRate', PsInvalidYieldRateError);

/** DepositCapExceeded: Deposit cap exceeded */
export class PsDepositCapExceededError extends ProgramError {
  override readonly name: string = 'DepositCapExceeded';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Deposit cap exceeded', program, cause);
  }
}
codeToErrorMap.set(0x1774, PsDepositCapExceededError);
nameToErrorMap.set('DepositCapExceeded', PsDepositCapExceededError);

/** NoExchangeRateAvailable: No exchange rate avaliable */
export class PsNoExchangeRateAvailableError extends ProgramError {
  override readonly name: string = 'NoExchangeRateAvailable';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('No exchange rate avaliable', program, cause);
  }
}
codeToErrorMap.set(0x1775, PsNoExchangeRateAvailableError);
nameToErrorMap.set('NoExchangeRateAvailable', PsNoExchangeRateAvailableError);

/** InsufficientStakedAmount: Insufficient staked amount */
export class PsInsufficientStakedAmountError extends ProgramError {
  override readonly name: string = 'InsufficientStakedAmount';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Insufficient staked amount', program, cause);
  }
}
codeToErrorMap.set(0x1776, PsInsufficientStakedAmountError);
nameToErrorMap.set('InsufficientStakedAmount', PsInsufficientStakedAmountError);

/** AlreadyInitialized: Already Initialized */
export class PsAlreadyInitializedError extends ProgramError {
  override readonly name: string = 'AlreadyInitialized';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Already Initialized', program, cause);
  }
}
codeToErrorMap.set(0x1777, PsAlreadyInitializedError);
nameToErrorMap.set('AlreadyInitialized', PsAlreadyInitializedError);

/** NotInitialized: Not Initialized */
export class PsNotInitializedError extends ProgramError {
  override readonly name: string = 'NotInitialized';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Not Initialized', program, cause);
  }
}
codeToErrorMap.set(0x1778, PsNotInitializedError);
nameToErrorMap.set('NotInitialized', PsNotInitializedError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getPtStakingErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getPtStakingErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
