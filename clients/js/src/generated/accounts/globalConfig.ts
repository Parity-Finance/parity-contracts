/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseYieldPhase,
  BaseYieldPhaseArgs,
  ExchangeRatePhase,
  ExchangeRatePhaseArgs,
  PointsEarnedPhase,
  PointsEarnedPhaseArgs,
  getBaseYieldPhaseSerializer,
  getExchangeRatePhaseSerializer,
  getPointsEarnedPhaseSerializer,
} from '../types';

export type GlobalConfig = Account<GlobalConfigAccountData>;

export type GlobalConfigAccountData = {
  discriminator: Array<number>;
  bump: number;
  owner: PublicKey;
  pendingOwner: PublicKey;
  admin: PublicKey;
  baseMint: PublicKey;
  stakingVault: PublicKey;
  baseMintDecimals: number;
  stakedSupply: bigint;
  depositCap: bigint;
  exchangeRateHistory: Array<ExchangeRatePhase>;
  pointsHistory: Array<PointsEarnedPhase>;
  baseYieldHistory: Array<BaseYieldPhase>;
};

export type GlobalConfigAccountDataArgs = {
  bump: number;
  owner: PublicKey;
  pendingOwner: PublicKey;
  admin: PublicKey;
  baseMint: PublicKey;
  stakingVault: PublicKey;
  baseMintDecimals: number;
  stakedSupply: number | bigint;
  depositCap: number | bigint;
  exchangeRateHistory: Array<ExchangeRatePhaseArgs>;
  pointsHistory: Array<PointsEarnedPhaseArgs>;
  baseYieldHistory: Array<BaseYieldPhaseArgs>;
};

export function getGlobalConfigAccountDataSerializer(): Serializer<
  GlobalConfigAccountDataArgs,
  GlobalConfigAccountData
> {
  return mapSerializer<
    GlobalConfigAccountDataArgs,
    any,
    GlobalConfigAccountData
  >(
    struct<GlobalConfigAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['bump', u8()],
        ['owner', publicKeySerializer()],
        ['pendingOwner', publicKeySerializer()],
        ['admin', publicKeySerializer()],
        ['baseMint', publicKeySerializer()],
        ['stakingVault', publicKeySerializer()],
        ['baseMintDecimals', u8()],
        ['stakedSupply', u64()],
        ['depositCap', u64()],
        ['exchangeRateHistory', array(getExchangeRatePhaseSerializer())],
        ['pointsHistory', array(getPointsEarnedPhaseSerializer())],
        ['baseYieldHistory', array(getBaseYieldPhaseSerializer())],
      ],
      { description: 'GlobalConfigAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [149, 8, 156, 202, 160, 252, 176, 217],
    })
  ) as Serializer<GlobalConfigAccountDataArgs, GlobalConfigAccountData>;
}

export function deserializeGlobalConfig(rawAccount: RpcAccount): GlobalConfig {
  return deserializeAccount(rawAccount, getGlobalConfigAccountDataSerializer());
}

export async function fetchGlobalConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GlobalConfig> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'GlobalConfig');
  return deserializeGlobalConfig(maybeAccount);
}

export async function safeFetchGlobalConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GlobalConfig | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeGlobalConfig(maybeAccount) : null;
}

export async function fetchAllGlobalConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GlobalConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'GlobalConfig');
    return deserializeGlobalConfig(maybeAccount);
  });
}

export async function safeFetchAllGlobalConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GlobalConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeGlobalConfig(maybeAccount as RpcAccount));
}

export function getGlobalConfigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'ptStaking',
    '6cxnuwSaJgaBsq6szLNGQ3UMibUB7XNv1mpoC91t37yv'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      bump: number;
      owner: PublicKey;
      pendingOwner: PublicKey;
      admin: PublicKey;
      baseMint: PublicKey;
      stakingVault: PublicKey;
      baseMintDecimals: number;
      stakedSupply: number | bigint;
      depositCap: number | bigint;
      exchangeRateHistory: Array<ExchangeRatePhaseArgs>;
      pointsHistory: Array<PointsEarnedPhaseArgs>;
      baseYieldHistory: Array<BaseYieldPhaseArgs>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      bump: [8, u8()],
      owner: [9, publicKeySerializer()],
      pendingOwner: [41, publicKeySerializer()],
      admin: [73, publicKeySerializer()],
      baseMint: [105, publicKeySerializer()],
      stakingVault: [137, publicKeySerializer()],
      baseMintDecimals: [169, u8()],
      stakedSupply: [170, u64()],
      depositCap: [178, u64()],
      exchangeRateHistory: [186, array(getExchangeRatePhaseSerializer())],
      pointsHistory: [null, array(getPointsEarnedPhaseSerializer())],
      baseYieldHistory: [null, array(getBaseYieldPhaseSerializer())],
    })
    .deserializeUsing<GlobalConfig>((account) =>
      deserializeGlobalConfig(account)
    )
    .whereField('discriminator', [149, 8, 156, 202, 160, 252, 176, 217]);
}

export function findGlobalConfigPda(
  context: Pick<Context, 'eddsa' | 'programs'>
): Pda {
  const programId = context.programs.getPublicKey(
    'ptStaking',
    '6cxnuwSaJgaBsq6szLNGQ3UMibUB7XNv1mpoC91t37yv'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('global-config'),
  ]);
}

export async function fetchGlobalConfigFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<GlobalConfig> {
  return fetchGlobalConfig(context, findGlobalConfigPda(context), options);
}

export async function safeFetchGlobalConfigFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<GlobalConfig | null> {
  return safeFetchGlobalConfig(context, findGlobalConfigPda(context), options);
}
