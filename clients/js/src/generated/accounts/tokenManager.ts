/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type TokenManager = Account<TokenManagerAccountData>;

export type TokenManagerAccountData = {
  discriminator: Array<number>;
  bump: number;
  owner: PublicKey;
  admin: PublicKey;
  minter: PublicKey;
  gateKeepers: Array<PublicKey>;
  merkleRoot: Uint8Array;
  mint: PublicKey;
  mintDecimals: number;
  quoteMint: PublicKey;
  quoteMintDecimals: number;
  exchangeRate: bigint;
  mintLimitPerSlot: bigint;
  redemptionLimitPerSlot: bigint;
  currentSlot: bigint;
  currentSlotMintVolume: bigint;
  currentSlotRedemptionVolume: bigint;
  active: boolean;
  emergencyFundBasisPoints: number;
  totalSupply: bigint;
  totalCollateral: bigint;
};

export type TokenManagerAccountDataArgs = {
  bump: number;
  owner: PublicKey;
  admin: PublicKey;
  minter: PublicKey;
  gateKeepers: Array<PublicKey>;
  merkleRoot: Uint8Array;
  mint: PublicKey;
  mintDecimals: number;
  quoteMint: PublicKey;
  quoteMintDecimals: number;
  exchangeRate: number | bigint;
  mintLimitPerSlot: number | bigint;
  redemptionLimitPerSlot: number | bigint;
  currentSlot: number | bigint;
  currentSlotMintVolume: number | bigint;
  currentSlotRedemptionVolume: number | bigint;
  active: boolean;
  emergencyFundBasisPoints: number;
  totalSupply: number | bigint;
  totalCollateral: number | bigint;
};

export function getTokenManagerAccountDataSerializer(): Serializer<
  TokenManagerAccountDataArgs,
  TokenManagerAccountData
> {
  return mapSerializer<
    TokenManagerAccountDataArgs,
    any,
    TokenManagerAccountData
  >(
    struct<TokenManagerAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['bump', u8()],
        ['owner', publicKeySerializer()],
        ['admin', publicKeySerializer()],
        ['minter', publicKeySerializer()],
        ['gateKeepers', array(publicKeySerializer())],
        ['merkleRoot', bytes({ size: 32 })],
        ['mint', publicKeySerializer()],
        ['mintDecimals', u8()],
        ['quoteMint', publicKeySerializer()],
        ['quoteMintDecimals', u8()],
        ['exchangeRate', u64()],
        ['mintLimitPerSlot', u64()],
        ['redemptionLimitPerSlot', u64()],
        ['currentSlot', u64()],
        ['currentSlotMintVolume', u64()],
        ['currentSlotRedemptionVolume', u64()],
        ['active', bool()],
        ['emergencyFundBasisPoints', u16()],
        ['totalSupply', u64()],
        ['totalCollateral', u64()],
      ],
      { description: 'TokenManagerAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [185, 97, 124, 231, 70, 75, 228, 47],
    })
  ) as Serializer<TokenManagerAccountDataArgs, TokenManagerAccountData>;
}

export function deserializeTokenManager(rawAccount: RpcAccount): TokenManager {
  return deserializeAccount(rawAccount, getTokenManagerAccountDataSerializer());
}

export async function fetchTokenManager(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenManager> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'TokenManager');
  return deserializeTokenManager(maybeAccount);
}

export async function safeFetchTokenManager(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenManager | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeTokenManager(maybeAccount) : null;
}

export async function fetchAllTokenManager(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenManager[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TokenManager');
    return deserializeTokenManager(maybeAccount);
  });
}

export async function safeFetchAllTokenManager(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenManager[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeTokenManager(maybeAccount as RpcAccount));
}

export function getTokenManagerGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'soldIssuance',
    '3ja6s1Pb55nhzhwYp4GY77n972iEQtWX55xoRwP2asCT'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      bump: number;
      owner: PublicKey;
      admin: PublicKey;
      minter: PublicKey;
      gateKeepers: Array<PublicKey>;
      merkleRoot: Uint8Array;
      mint: PublicKey;
      mintDecimals: number;
      quoteMint: PublicKey;
      quoteMintDecimals: number;
      exchangeRate: number | bigint;
      mintLimitPerSlot: number | bigint;
      redemptionLimitPerSlot: number | bigint;
      currentSlot: number | bigint;
      currentSlotMintVolume: number | bigint;
      currentSlotRedemptionVolume: number | bigint;
      active: boolean;
      emergencyFundBasisPoints: number;
      totalSupply: number | bigint;
      totalCollateral: number | bigint;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      bump: [8, u8()],
      owner: [9, publicKeySerializer()],
      admin: [41, publicKeySerializer()],
      minter: [73, publicKeySerializer()],
      gateKeepers: [105, array(publicKeySerializer())],
      merkleRoot: [null, bytes({ size: 32 })],
      mint: [null, publicKeySerializer()],
      mintDecimals: [null, u8()],
      quoteMint: [null, publicKeySerializer()],
      quoteMintDecimals: [null, u8()],
      exchangeRate: [null, u64()],
      mintLimitPerSlot: [null, u64()],
      redemptionLimitPerSlot: [null, u64()],
      currentSlot: [null, u64()],
      currentSlotMintVolume: [null, u64()],
      currentSlotRedemptionVolume: [null, u64()],
      active: [null, bool()],
      emergencyFundBasisPoints: [null, u16()],
      totalSupply: [null, u64()],
      totalCollateral: [null, u64()],
    })
    .deserializeUsing<TokenManager>((account) =>
      deserializeTokenManager(account)
    )
    .whereField('discriminator', [185, 97, 124, 231, 70, 75, 228, 47]);
}

export function findTokenManagerPda(
  context: Pick<Context, 'eddsa' | 'programs'>
): Pda {
  const programId = context.programs.getPublicKey(
    'soldIssuance',
    '3ja6s1Pb55nhzhwYp4GY77n972iEQtWX55xoRwP2asCT'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('token-manager'),
  ]);
}

export async function fetchTokenManagerFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<TokenManager> {
  return fetchTokenManager(context, findTokenManagerPda(context), options);
}

export async function safeFetchTokenManagerFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<TokenManager | null> {
  return safeFetchTokenManager(context, findTokenManagerPda(context), options);
}
