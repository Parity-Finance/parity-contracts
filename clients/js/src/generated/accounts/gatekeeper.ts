/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Gatekeeper = Account<GatekeeperAccountData>;

export type GatekeeperAccountData = {
  discriminator: Array<number>;
  wallet: PublicKey;
};

export type GatekeeperAccountDataArgs = { wallet: PublicKey };

export function getGatekeeperAccountDataSerializer(): Serializer<
  GatekeeperAccountDataArgs,
  GatekeeperAccountData
> {
  return mapSerializer<GatekeeperAccountDataArgs, any, GatekeeperAccountData>(
    struct<GatekeeperAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['wallet', publicKeySerializer()],
      ],
      { description: 'GatekeeperAccountData' }
    ),
    (value) => ({ ...value, discriminator: [195, 24, 78, 228, 0, 14, 73, 207] })
  ) as Serializer<GatekeeperAccountDataArgs, GatekeeperAccountData>;
}

export function deserializeGatekeeper(rawAccount: RpcAccount): Gatekeeper {
  return deserializeAccount(rawAccount, getGatekeeperAccountDataSerializer());
}

export async function fetchGatekeeper(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Gatekeeper> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Gatekeeper');
  return deserializeGatekeeper(maybeAccount);
}

export async function safeFetchGatekeeper(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Gatekeeper | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeGatekeeper(maybeAccount) : null;
}

export async function fetchAllGatekeeper(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Gatekeeper[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Gatekeeper');
    return deserializeGatekeeper(maybeAccount);
  });
}

export async function safeFetchAllGatekeeper(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Gatekeeper[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeGatekeeper(maybeAccount as RpcAccount));
}

export function getGatekeeperGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'parityIssuance',
    'ALukFrRp8cFkWCEZamFVsBiFtxKYPLUUGRxskFh1g5ZX'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ discriminator: Array<number>; wallet: PublicKey }>({
      discriminator: [0, array(u8(), { size: 8 })],
      wallet: [8, publicKeySerializer()],
    })
    .deserializeUsing<Gatekeeper>((account) => deserializeGatekeeper(account))
    .whereField('discriminator', [195, 24, 78, 228, 0, 14, 73, 207]);
}

export function getGatekeeperSize(): number {
  return 40;
}

export function findGatekeeperPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the gate_keeper wallet */
    wallet: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'parityIssuance',
    'ALukFrRp8cFkWCEZamFVsBiFtxKYPLUUGRxskFh1g5ZX'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('gatekeeper'),
    publicKeySerializer().serialize(seeds.wallet),
  ]);
}

export async function fetchGatekeeperFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findGatekeeperPda>[1],
  options?: RpcGetAccountOptions
): Promise<Gatekeeper> {
  return fetchGatekeeper(context, findGatekeeperPda(context, seeds), options);
}

export async function safeFetchGatekeeperFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findGatekeeperPda>[1],
  options?: RpcGetAccountOptions
): Promise<Gatekeeper | null> {
  return safeFetchGatekeeper(
    context,
    findGatekeeperPda(context, seeds),
    options
  );
}
